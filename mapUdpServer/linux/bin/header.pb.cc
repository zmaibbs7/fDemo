// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace packet {
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR Itemlist::Itemlist(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemlistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemlistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemlistDefaultTypeInternal() {}
  union {
    Itemlist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemlistDefaultTypeInternal _Itemlist_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.whole_file_md5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_packet_num_)*/0
  , /*decltype(_impl_.file_packet_total_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR FileTransferStatus::FileTransferStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_packet_index_)*/0
  , /*decltype(_impl_.total_packets_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferStatusDefaultTypeInternal() {}
  union {
    FileTransferStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferStatusDefaultTypeInternal _FileTransferStatus_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace packet
namespace packet {
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MessageType_strings[6] = {};

static const char MessageType_names[] =
  "FILE"
  "FILE_TRANSFER_STATUS"
  "HEARTBEAT"
  "LOCATION"
  "MAPLIST"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MessageType_entries[] = {
  { {MessageType_names + 0, 4}, 4 },
  { {MessageType_names + 4, 20}, 5 },
  { {MessageType_names + 24, 9}, 1 },
  { {MessageType_names + 33, 8}, 3 },
  { {MessageType_names + 41, 7}, 2 },
  { {MessageType_names + 48, 7}, 0 },
};

static const int MessageType_entries_by_number[] = {
  5, // 0 -> UNKNOWN
  2, // 1 -> HEARTBEAT
  4, // 2 -> MAPLIST
  3, // 3 -> LOCATION
  0, // 4 -> FILE
  1, // 5 -> FILE_TRANSFER_STATUS
};

const std::string& MessageType_Name(
    MessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MessageType_entries,
          MessageType_entries_by_number,
          6, MessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MessageType_entries,
      MessageType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MessageType_strings[idx].get();
}
bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MessageType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<MessageType>(int_value);
  }
  return success;
}

// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    _this->_impl_.node_id_.Set(from._internal_node_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:packet.Heartbeat)
}

inline void Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:packet.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_id_.Destroy();
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.Heartbeat.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Heartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Heartbeat*>(
      &from));
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  Heartbeat* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_id_, lhs_arena,
      &other->_impl_.node_id_, rhs_arena
  );
}

std::string Heartbeat::GetTypeName() const {
  return "packet.Heartbeat";
}


// ===================================================================

class Itemlist::_Internal {
 public:
};

Itemlist::Itemlist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.Itemlist)
}
Itemlist::Itemlist(const Itemlist& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Itemlist* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:packet.Itemlist)
}

inline void Itemlist::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Itemlist::~Itemlist() {
  // @@protoc_insertion_point(destructor:packet.Itemlist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Itemlist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void Itemlist::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Itemlist::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Itemlist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Itemlist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Itemlist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Itemlist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.Itemlist.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Itemlist)
  return target;
}

size_t Itemlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Itemlist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Itemlist::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Itemlist*>(
      &from));
}

void Itemlist::MergeFrom(const Itemlist& from) {
  Itemlist* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Itemlist)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Itemlist::CopyFrom(const Itemlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Itemlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Itemlist::IsInitialized() const {
  return true;
}

void Itemlist::InternalSwap(Itemlist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

std::string Itemlist::GetTypeName() const {
  return "packet.Itemlist";
}


// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:packet.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:packet.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<std::string>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double yaw = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Location*>(
      &from));
}

void Location::MergeFrom(const Location& from) {
  Location* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.yaw_)
      + sizeof(Location::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string Location::GetTypeName() const {
  return "packet.Location";
}


// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_content_){}
    , decltype(_impl_.whole_file_md5_){}
    , decltype(_impl_.file_packet_num_){}
    , decltype(_impl_.file_packet_total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_name().empty()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_content().empty()) {
    _this->_impl_.file_content_.Set(from._internal_file_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.whole_file_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whole_file_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_whole_file_md5().empty()) {
    _this->_impl_.whole_file_md5_.Set(from._internal_whole_file_md5(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_packet_num_, &from._impl_.file_packet_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_packet_total_) -
    reinterpret_cast<char*>(&_impl_.file_packet_num_)) + sizeof(_impl_.file_packet_total_));
  // @@protoc_insertion_point(copy_constructor:packet.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_content_){}
    , decltype(_impl_.whole_file_md5_){}
    , decltype(_impl_.file_packet_num_){0}
    , decltype(_impl_.file_packet_total_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.whole_file_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whole_file_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:packet.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_name_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.file_content_.Destroy();
  _impl_.whole_file_md5_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_name_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.file_content_.ClearToEmpty();
  _impl_.whole_file_md5_.ClearToEmpty();
  ::memset(&_impl_.file_packet_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.file_packet_total_) -
      reinterpret_cast<char*>(&_impl_.file_packet_num_)) + sizeof(_impl_.file_packet_total_));
  _internal_metadata_.Clear<std::string>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes file_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 file_packet_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.file_packet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 file_packet_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.file_packet_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string whole_file_md5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_whole_file_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_name = 1;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.File.map_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_name(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.File.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // bytes file_content = 3;
  if (!this->_internal_file_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_file_content(), target);
  }

  // int32 file_packet_num = 4;
  if (this->_internal_file_packet_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_file_packet_num(), target);
  }

  // int32 file_packet_total = 5;
  if (this->_internal_file_packet_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_file_packet_total(), target);
  }

  // string whole_file_md5 = 6;
  if (!this->_internal_whole_file_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_whole_file_md5().data(), static_cast<int>(this->_internal_whole_file_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.File.whole_file_md5");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_whole_file_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 1;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // bytes file_content = 3;
  if (!this->_internal_file_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_content());
  }

  // string whole_file_md5 = 6;
  if (!this->_internal_whole_file_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_whole_file_md5());
  }

  // int32 file_packet_num = 4;
  if (this->_internal_file_packet_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_packet_num());
  }

  // int32 file_packet_total = 5;
  if (this->_internal_file_packet_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_packet_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const File*>(
      &from));
}

void File::MergeFrom(const File& from) {
  File* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.File)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_name().empty()) {
    _this->_internal_set_map_name(from._internal_map_name());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_content().empty()) {
    _this->_internal_set_file_content(from._internal_file_content());
  }
  if (!from._internal_whole_file_md5().empty()) {
    _this->_internal_set_whole_file_md5(from._internal_whole_file_md5());
  }
  if (from._internal_file_packet_num() != 0) {
    _this->_internal_set_file_packet_num(from._internal_file_packet_num());
  }
  if (from._internal_file_packet_total() != 0) {
    _this->_internal_set_file_packet_total(from._internal_file_packet_total());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_content_, lhs_arena,
      &other->_impl_.file_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whole_file_md5_, lhs_arena,
      &other->_impl_.whole_file_md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_total_)
      + sizeof(File::_impl_.file_packet_total_)
      - PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_num_)>(
          reinterpret_cast<char*>(&_impl_.file_packet_num_),
          reinterpret_cast<char*>(&other->_impl_.file_packet_num_));
}

std::string File::GetTypeName() const {
  return "packet.File";
}


// ===================================================================

class FileTransferStatus::_Internal {
 public:
};

FileTransferStatus::FileTransferStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.FileTransferStatus)
}
FileTransferStatus::FileTransferStatus(const FileTransferStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FileTransferStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_file_name_){}
    , decltype(_impl_.current_packet_index_){}
    , decltype(_impl_.total_packets_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.current_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_file_name().empty()) {
    _this->_impl_.current_file_name_.Set(from._internal_current_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.current_packet_index_, &from._impl_.current_packet_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_packets_) -
    reinterpret_cast<char*>(&_impl_.current_packet_index_)) + sizeof(_impl_.total_packets_));
  // @@protoc_insertion_point(copy_constructor:packet.FileTransferStatus)
}

inline void FileTransferStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_file_name_){}
    , decltype(_impl_.current_packet_index_){0}
    , decltype(_impl_.total_packets_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.current_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransferStatus::~FileTransferStatus() {
  // @@protoc_insertion_point(destructor:packet.FileTransferStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_file_name_.Destroy();
}

void FileTransferStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.FileTransferStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_file_name_.ClearToEmpty();
  ::memset(&_impl_.current_packet_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_packets_) -
      reinterpret_cast<char*>(&_impl_.current_packet_index_)) + sizeof(_impl_.total_packets_));
  _internal_metadata_.Clear<std::string>();
}

const char* FileTransferStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 current_packet_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.current_packet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string current_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_current_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransferStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.FileTransferStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_packet_index = 1;
  if (this->_internal_current_packet_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_current_packet_index(), target);
  }

  // int32 total_packets = 2;
  if (this->_internal_total_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_packets(), target);
  }

  // string current_file_name = 3;
  if (!this->_internal_current_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_file_name().data(), static_cast<int>(this->_internal_current_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packet.FileTransferStatus.current_file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_current_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.FileTransferStatus)
  return target;
}

size_t FileTransferStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.FileTransferStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string current_file_name = 3;
  if (!this->_internal_current_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_file_name());
  }

  // int32 current_packet_index = 1;
  if (this->_internal_current_packet_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_packet_index());
  }

  // int32 total_packets = 2;
  if (this->_internal_total_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_packets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTransferStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FileTransferStatus*>(
      &from));
}

void FileTransferStatus::MergeFrom(const FileTransferStatus& from) {
  FileTransferStatus* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.FileTransferStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_file_name().empty()) {
    _this->_internal_set_current_file_name(from._internal_current_file_name());
  }
  if (from._internal_current_packet_index() != 0) {
    _this->_internal_set_current_packet_index(from._internal_current_packet_index());
  }
  if (from._internal_total_packets() != 0) {
    _this->_internal_set_total_packets(from._internal_total_packets());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileTransferStatus::CopyFrom(const FileTransferStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.FileTransferStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferStatus::IsInitialized() const {
  return true;
}

void FileTransferStatus::InternalSwap(FileTransferStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_file_name_, lhs_arena,
      &other->_impl_.current_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.total_packets_)
      + sizeof(FileTransferStatus::_impl_.total_packets_)
      - PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.current_packet_index_)>(
          reinterpret_cast<char*>(&_impl_.current_packet_index_),
          reinterpret_cast<char*>(&other->_impl_.current_packet_index_));
}

std::string FileTransferStatus::GetTypeName() const {
  return "packet.FileTransferStatus";
}


// ===================================================================

class Message::_Internal {
 public:
  static const ::packet::Heartbeat& heartbeat(const Message* msg);
  static const ::packet::Itemlist& itemlist(const Message* msg);
  static const ::packet::Location& location(const Message* msg);
  static const ::packet::File& file(const Message* msg);
  static const ::packet::FileTransferStatus& filetransferstatus(const Message* msg);
};

const ::packet::Heartbeat&
Message::_Internal::heartbeat(const Message* msg) {
  return *msg->_impl_.payload_.heartbeat_;
}
const ::packet::Itemlist&
Message::_Internal::itemlist(const Message* msg) {
  return *msg->_impl_.payload_.itemlist_;
}
const ::packet::Location&
Message::_Internal::location(const Message* msg) {
  return *msg->_impl_.payload_.location_;
}
const ::packet::File&
Message::_Internal::file(const Message* msg) {
  return *msg->_impl_.payload_.file_;
}
const ::packet::FileTransferStatus&
Message::_Internal::filetransferstatus(const Message* msg) {
  return *msg->_impl_.payload_.filetransferstatus_;
}
void Message::set_allocated_heartbeat(::packet::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.heartbeat)
}
void Message::set_allocated_itemlist(::packet::Itemlist* itemlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (itemlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(itemlist);
    if (message_arena != submessage_arena) {
      itemlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, itemlist, submessage_arena);
    }
    set_has_itemlist();
    _impl_.payload_.itemlist_ = itemlist;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.itemlist)
}
void Message::set_allocated_location(::packet::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
    _impl_.payload_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.location)
}
void Message::set_allocated_file(::packet::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.payload_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.file)
}
void Message::set_allocated_filetransferstatus(::packet::FileTransferStatus* filetransferstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (filetransferstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filetransferstatus);
    if (message_arena != submessage_arena) {
      filetransferstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filetransferstatus, submessage_arena);
    }
    set_has_filetransferstatus();
    _impl_.payload_.filetransferstatus_ = filetransferstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.fileTransferStatus)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:packet.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::packet::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kItemlist: {
      _this->_internal_mutable_itemlist()->::packet::Itemlist::MergeFrom(
          from._internal_itemlist());
      break;
    }
    case kLocation: {
      _this->_internal_mutable_location()->::packet::Location::MergeFrom(
          from._internal_location());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::packet::File::MergeFrom(
          from._internal_file());
      break;
    }
    case kFileTransferStatus: {
      _this->_internal_mutable_filetransferstatus()->::packet::FileTransferStatus::MergeFrom(
          from._internal_filetransferstatus());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:packet.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:packet.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:packet.Message)
  switch (payload_case()) {
    case kHeartbeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.heartbeat_;
      }
      break;
    }
    case kItemlist: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.itemlist_;
      }
      break;
    }
    case kLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.location_;
      }
      break;
    }
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.file_;
      }
      break;
    }
    case kFileTransferStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.filetransferstatus_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_payload();
  _internal_metadata_.Clear<std::string>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .packet.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::packet::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .packet.Heartbeat heartbeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.Itemlist itemlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_itemlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.Location location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.File file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .packet.FileTransferStatus fileTransferStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_filetransferstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .packet.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .packet.Heartbeat heartbeat = 2;
  if (_internal_has_heartbeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  // .packet.Itemlist itemlist = 3;
  if (_internal_has_itemlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::itemlist(this),
        _Internal::itemlist(this).GetCachedSize(), target, stream);
  }

  // .packet.Location location = 4;
  if (_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .packet.File file = 5;
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .packet.FileTransferStatus fileTransferStatus = 6;
  if (_internal_has_filetransferstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::filetransferstatus(this),
        _Internal::filetransferstatus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .packet.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (payload_case()) {
    // .packet.Heartbeat heartbeat = 2;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.heartbeat_);
      break;
    }
    // .packet.Itemlist itemlist = 3;
    case kItemlist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.itemlist_);
      break;
    }
    // .packet.Location location = 4;
    case kLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.location_);
      break;
    }
    // .packet.File file = 5;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.file_);
      break;
    }
    // .packet.FileTransferStatus fileTransferStatus = 6;
    case kFileTransferStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.filetransferstatus_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Message*>(
      &from));
}

void Message::MergeFrom(const Message& from) {
  Message* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::packet::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kItemlist: {
      _this->_internal_mutable_itemlist()->::packet::Itemlist::MergeFrom(
          from._internal_itemlist());
      break;
    }
    case kLocation: {
      _this->_internal_mutable_location()->::packet::Location::MergeFrom(
          from._internal_location());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::packet::File::MergeFrom(
          from._internal_file());
      break;
    }
    case kFileTransferStatus: {
      _this->_internal_mutable_filetransferstatus()->::packet::FileTransferStatus::MergeFrom(
          from._internal_filetransferstatus());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string Message::GetTypeName() const {
  return "packet.Message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::packet::Heartbeat*
Arena::CreateMaybeMessage< ::packet::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::Itemlist*
Arena::CreateMaybeMessage< ::packet::Itemlist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::Itemlist >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::Location*
Arena::CreateMaybeMessage< ::packet::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::File*
Arena::CreateMaybeMessage< ::packet::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::File >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::FileTransferStatus*
Arena::CreateMaybeMessage< ::packet::FileTransferStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::FileTransferStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::Message*
Arena::CreateMaybeMessage< ::packet::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
