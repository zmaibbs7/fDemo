// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: header.proto
// Protobuf C++ Version: 5.27.0-dev

#include "header.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace packet {

inline constexpr Location::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        yaw_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Location::Location(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;

inline constexpr Itemlist::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : items_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Itemlist::Itemlist(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ItemlistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemlistDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemlistDefaultTypeInternal() {}
  union {
    Itemlist _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemlistDefaultTypeInternal _Itemlist_default_instance_;

inline constexpr Heartbeat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : node_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;

inline constexpr FileTransferStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : current_file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_packet_index_{0},
        total_packets_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FileTransferStatus::FileTransferStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FileTransferStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferStatusDefaultTypeInternal() {}
  union {
    FileTransferStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferStatusDefaultTypeInternal _FileTransferStatus_default_instance_;

inline constexpr File::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : map_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        whole_file_md5_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_packet_num_{0},
        file_packet_total_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR File::File(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;

inline constexpr Message::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{static_cast< ::packet::MessageType >(0)},
        payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Message::Message(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace packet
namespace packet {
PROTOBUF_CONSTINIT const uint32_t MessageType_internal_data_[] = {
    393216u, 0u, };
bool MessageType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    MessageType_strings[6] = {};

static const char MessageType_names[] = {
    "FILE"
    "FILE_TRANSFER_STATUS"
    "HEARTBEAT"
    "LOCATION"
    "MAPLIST"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry MessageType_entries[] =
    {
        {{&MessageType_names[0], 4}, 4},
        {{&MessageType_names[4], 20}, 5},
        {{&MessageType_names[24], 9}, 1},
        {{&MessageType_names[33], 8}, 3},
        {{&MessageType_names[41], 7}, 2},
        {{&MessageType_names[48], 7}, 0},
};

static const int MessageType_entries_by_number[] = {
    5,  // 0 -> UNKNOWN
    2,  // 1 -> HEARTBEAT
    4,  // 2 -> MAPLIST
    3,  // 3 -> LOCATION
    0,  // 4 -> FILE
    1,  // 5 -> FILE_TRANSFER_STATUS
};

const std::string& MessageType_Name(MessageType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          MessageType_entries, MessageType_entries_by_number,
          6, MessageType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      MessageType_entries, MessageType_entries_by_number, 6,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : MessageType_strings[idx].get();
}

bool MessageType_Parse(absl::string_view name, MessageType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      MessageType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<MessageType>(int_value);
  }
  return success;
}
// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.Heartbeat)
}
inline PROTOBUF_NDEBUG_INLINE Heartbeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::packet::Heartbeat& from_msg)
      : node_id_(arena, from.node_id_),
        _cached_size_{0} {}

Heartbeat::Heartbeat(
    ::google::protobuf::Arena* arena,
    const Heartbeat& from)
    : ::google::protobuf::MessageLite(arena) {
  Heartbeat* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:packet.Heartbeat)
}
inline PROTOBUF_NDEBUG_INLINE Heartbeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : node_id_(arena),
        _cached_size_{0} {}

inline void Heartbeat::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:packet.Heartbeat)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Heartbeat::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.node_id_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Heartbeat::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<17> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_._cached_size_),
              true,
          },
          "packet.Heartbeat",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 32, 2> Heartbeat::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Heartbeat_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::packet::Heartbeat>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string node_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.node_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string node_id = 1;
    {PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.node_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\7\0\0\0\0\0\0"
    "packet.Heartbeat"
    "node_id"
  }},
};

PROTOBUF_NOINLINE void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Heartbeat)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* Heartbeat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Heartbeat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    const std::string& _s = this->_internal_node_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "packet.Heartbeat.node_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Heartbeat)
  return target;
}

::size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Heartbeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Heartbeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Heartbeat*>(
      &from));
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  Heartbeat* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Heartbeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, &other->_impl_.node_id_, arena);
}

// ===================================================================

class Itemlist::_Internal {
 public:
};

Itemlist::Itemlist(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.Itemlist)
}
inline PROTOBUF_NDEBUG_INLINE Itemlist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::packet::Itemlist& from_msg)
      : items_{visibility, arena, from.items_},
        _cached_size_{0} {}

Itemlist::Itemlist(
    ::google::protobuf::Arena* arena,
    const Itemlist& from)
    : ::google::protobuf::MessageLite(arena) {
  Itemlist* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:packet.Itemlist)
}
inline PROTOBUF_NDEBUG_INLINE Itemlist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : items_{visibility, arena},
        _cached_size_{0} {}

inline void Itemlist::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Itemlist::~Itemlist() {
  // @@protoc_insertion_point(destructor:packet.Itemlist)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Itemlist::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Itemlist::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<16> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Itemlist, _impl_._cached_size_),
              true,
          },
          "packet.Itemlist",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 29, 2> Itemlist::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Itemlist_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::packet::Itemlist>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string items = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Itemlist, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string items = 1;
    {PROTOBUF_FIELD_OFFSET(Itemlist, _impl_.items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\17\5\0\0\0\0\0\0"
    "packet.Itemlist"
    "items"
  }},
};

PROTOBUF_NOINLINE void Itemlist::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Itemlist)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* Itemlist::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Itemlist)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; ++i) {
    const auto& s = this->_internal_items().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "packet.Itemlist.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Itemlist)
  return target;
}

::size_t Itemlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Itemlist)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string items = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_items().size());
  for (int i = 0, n = _internal_items().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_items().Get(i));
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Itemlist::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Itemlist*>(
      &from));
}

void Itemlist::MergeFrom(const Itemlist& from) {
  Itemlist* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Itemlist)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Itemlist::CopyFrom(const Itemlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Itemlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Itemlist::IsInitialized() const {
  return true;
}

void Itemlist::InternalSwap(Itemlist* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.Location)
}
Location::Location(
    ::google::protobuf::Arena* arena, const Location& from)
    : Location(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Location::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Location::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::yaw_));
}
Location::~Location() {
  // @@protoc_insertion_point(destructor:packet.Location)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Location::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Location::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<16> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Location, _impl_._cached_size_),
              true,
          },
          "packet.Location",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Location::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Location_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::packet::Location>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Location, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Location, _impl_.y_)}},
    // double yaw = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Location, _impl_.yaw_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Location, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Location, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double yaw = 3;
    {PROTOBUF_FIELD_OFFSET(Location, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Location)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* Location::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Location)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double yaw = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Location)
  return target;
}

::size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Location)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double yaw = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 9;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Location::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Location*>(
      &from));
}

void Location::MergeFrom(const Location& from) {
  Location* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Location)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_impl_.yaw_ = from._impl_.yaw_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.yaw_)
      + sizeof(Location::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

// ===================================================================

class File::_Internal {
 public:
};

File::File(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.File)
}
inline PROTOBUF_NDEBUG_INLINE File::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::packet::File& from_msg)
      : map_name_(arena, from.map_name_),
        file_name_(arena, from.file_name_),
        file_content_(arena, from.file_content_),
        whole_file_md5_(arena, from.whole_file_md5_),
        _cached_size_{0} {}

File::File(
    ::google::protobuf::Arena* arena,
    const File& from)
    : ::google::protobuf::MessageLite(arena) {
  File* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_packet_num_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, file_packet_num_),
           offsetof(Impl_, file_packet_total_) -
               offsetof(Impl_, file_packet_num_) +
               sizeof(Impl_::file_packet_total_));

  // @@protoc_insertion_point(copy_constructor:packet.File)
}
inline PROTOBUF_NDEBUG_INLINE File::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : map_name_(arena),
        file_name_(arena),
        file_content_(arena),
        whole_file_md5_(arena),
        _cached_size_{0} {}

inline void File::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_packet_num_),
           0,
           offsetof(Impl_, file_packet_total_) -
               offsetof(Impl_, file_packet_num_) +
               sizeof(Impl_::file_packet_total_));
}
File::~File() {
  // @@protoc_insertion_point(destructor:packet.File)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void File::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.map_name_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.file_content_.Destroy();
  _impl_.whole_file_md5_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
File::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<12> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(File, _impl_._cached_size_),
              true,
          },
          "packet.File",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 51, 2> File::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_File_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::packet::File>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string map_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(File, _impl_.map_name_)}},
    // string file_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(File, _impl_.file_name_)}},
    // bytes file_content = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(File, _impl_.file_content_)}},
    // int32 file_packet_num = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_num_)}},
    // int32 file_packet_total = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_total_)}},
    // string whole_file_md5 = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(File, _impl_.whole_file_md5_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string map_name = 1;
    {PROTOBUF_FIELD_OFFSET(File, _impl_.map_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string file_name = 2;
    {PROTOBUF_FIELD_OFFSET(File, _impl_.file_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes file_content = 3;
    {PROTOBUF_FIELD_OFFSET(File, _impl_.file_content_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 file_packet_num = 4;
    {PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 file_packet_total = 5;
    {PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string whole_file_md5 = 6;
    {PROTOBUF_FIELD_OFFSET(File, _impl_.whole_file_md5_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\13\10\11\0\0\0\16\0"
    "packet.File"
    "map_name"
    "file_name"
    "whole_file_md5"
  }},
};

PROTOBUF_NOINLINE void File::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.File)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_name_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.file_content_.ClearToEmpty();
  _impl_.whole_file_md5_.ClearToEmpty();
  ::memset(&_impl_.file_packet_num_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.file_packet_total_) -
      reinterpret_cast<char*>(&_impl_.file_packet_num_)) + sizeof(_impl_.file_packet_total_));
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* File::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.File)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string map_name = 1;
  if (!this->_internal_map_name().empty()) {
    const std::string& _s = this->_internal_map_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "packet.File.map_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "packet.File.file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes file_content = 3;
  if (!this->_internal_file_content().empty()) {
    const std::string& _s = this->_internal_file_content();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // int32 file_packet_num = 4;
  if (this->_internal_file_packet_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_file_packet_num(), target);
  }

  // int32 file_packet_total = 5;
  if (this->_internal_file_packet_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_file_packet_total(), target);
  }

  // string whole_file_md5 = 6;
  if (!this->_internal_whole_file_md5().empty()) {
    const std::string& _s = this->_internal_whole_file_md5();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "packet.File.whole_file_md5");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.File)
  return target;
}

::size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.File)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string map_name = 1;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_map_name());
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // bytes file_content = 3;
  if (!this->_internal_file_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_file_content());
  }

  // string whole_file_md5 = 6;
  if (!this->_internal_whole_file_md5().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_whole_file_md5());
  }

  // int32 file_packet_num = 4;
  if (this->_internal_file_packet_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_file_packet_num());
  }

  // int32 file_packet_total = 5;
  if (this->_internal_file_packet_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_file_packet_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const File*>(
      &from));
}

void File::MergeFrom(const File& from) {
  File* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.File)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_name().empty()) {
    _this->_internal_set_map_name(from._internal_map_name());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_content().empty()) {
    _this->_internal_set_file_content(from._internal_file_content());
  }
  if (!from._internal_whole_file_md5().empty()) {
    _this->_internal_set_whole_file_md5(from._internal_whole_file_md5());
  }
  if (from._internal_file_packet_num() != 0) {
    _this->_impl_.file_packet_num_ = from._impl_.file_packet_num_;
  }
  if (from._internal_file_packet_total() != 0) {
    _this->_impl_.file_packet_total_ = from._impl_.file_packet_total_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.map_name_, &other->_impl_.map_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, &other->_impl_.file_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_content_, &other->_impl_.file_content_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.whole_file_md5_, &other->_impl_.whole_file_md5_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_total_)
      + sizeof(File::_impl_.file_packet_total_)
      - PROTOBUF_FIELD_OFFSET(File, _impl_.file_packet_num_)>(
          reinterpret_cast<char*>(&_impl_.file_packet_num_),
          reinterpret_cast<char*>(&other->_impl_.file_packet_num_));
}

// ===================================================================

class FileTransferStatus::_Internal {
 public:
};

FileTransferStatus::FileTransferStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.FileTransferStatus)
}
inline PROTOBUF_NDEBUG_INLINE FileTransferStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::packet::FileTransferStatus& from_msg)
      : current_file_name_(arena, from.current_file_name_),
        _cached_size_{0} {}

FileTransferStatus::FileTransferStatus(
    ::google::protobuf::Arena* arena,
    const FileTransferStatus& from)
    : ::google::protobuf::MessageLite(arena) {
  FileTransferStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_packet_index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, current_packet_index_),
           offsetof(Impl_, total_packets_) -
               offsetof(Impl_, current_packet_index_) +
               sizeof(Impl_::total_packets_));

  // @@protoc_insertion_point(copy_constructor:packet.FileTransferStatus)
}
inline PROTOBUF_NDEBUG_INLINE FileTransferStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : current_file_name_(arena),
        _cached_size_{0} {}

inline void FileTransferStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_packet_index_),
           0,
           offsetof(Impl_, total_packets_) -
               offsetof(Impl_, current_packet_index_) +
               sizeof(Impl_::total_packets_));
}
FileTransferStatus::~FileTransferStatus() {
  // @@protoc_insertion_point(destructor:packet.FileTransferStatus)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FileTransferStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.current_file_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
FileTransferStatus::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<26> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_._cached_size_),
              true,
          },
          "packet.FileTransferStatus",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 51, 2> FileTransferStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FileTransferStatus_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::packet::FileTransferStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 current_packet_index = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.current_packet_index_)}},
    // int32 total_packets = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.total_packets_)}},
    // string current_file_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.current_file_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 current_packet_index = 1;
    {PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.current_packet_index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_packets = 2;
    {PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.total_packets_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string current_file_name = 3;
    {PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.current_file_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\0\0\21\0\0\0\0"
    "packet.FileTransferStatus"
    "current_file_name"
  }},
};

PROTOBUF_NOINLINE void FileTransferStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.FileTransferStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_file_name_.ClearToEmpty();
  ::memset(&_impl_.current_packet_index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_packets_) -
      reinterpret_cast<char*>(&_impl_.current_packet_index_)) + sizeof(_impl_.total_packets_));
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* FileTransferStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.FileTransferStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 current_packet_index = 1;
  if (this->_internal_current_packet_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_current_packet_index(), target);
  }

  // int32 total_packets = 2;
  if (this->_internal_total_packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_total_packets(), target);
  }

  // string current_file_name = 3;
  if (!this->_internal_current_file_name().empty()) {
    const std::string& _s = this->_internal_current_file_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "packet.FileTransferStatus.current_file_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.FileTransferStatus)
  return target;
}

::size_t FileTransferStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.FileTransferStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string current_file_name = 3;
  if (!this->_internal_current_file_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_file_name());
  }

  // int32 current_packet_index = 1;
  if (this->_internal_current_packet_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_current_packet_index());
  }

  // int32 total_packets = 2;
  if (this->_internal_total_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_packets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FileTransferStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FileTransferStatus*>(
      &from));
}

void FileTransferStatus::MergeFrom(const FileTransferStatus& from) {
  FileTransferStatus* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.FileTransferStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_file_name().empty()) {
    _this->_internal_set_current_file_name(from._internal_current_file_name());
  }
  if (from._internal_current_packet_index() != 0) {
    _this->_impl_.current_packet_index_ = from._impl_.current_packet_index_;
  }
  if (from._internal_total_packets() != 0) {
    _this->_impl_.total_packets_ = from._impl_.total_packets_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileTransferStatus::CopyFrom(const FileTransferStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.FileTransferStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FileTransferStatus::IsInitialized() const {
  return true;
}

void FileTransferStatus::InternalSwap(FileTransferStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_file_name_, &other->_impl_.current_file_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.total_packets_)
      + sizeof(FileTransferStatus::_impl_.total_packets_)
      - PROTOBUF_FIELD_OFFSET(FileTransferStatus, _impl_.current_packet_index_)>(
          reinterpret_cast<char*>(&_impl_.current_packet_index_),
          reinterpret_cast<char*>(&other->_impl_.current_packet_index_));
}

// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::packet::Message, _impl_._oneof_case_);
};

void Message::set_allocated_heartbeat(::packet::Heartbeat* heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (heartbeat) {
    ::google::protobuf::Arena* submessage_arena = heartbeat->GetArena();
    if (message_arena != submessage_arena) {
      heartbeat = ::google::protobuf::internal::GetOwnedMessage(message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.heartbeat)
}
void Message::set_allocated_itemlist(::packet::Itemlist* itemlist) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (itemlist) {
    ::google::protobuf::Arena* submessage_arena = itemlist->GetArena();
    if (message_arena != submessage_arena) {
      itemlist = ::google::protobuf::internal::GetOwnedMessage(message_arena, itemlist, submessage_arena);
    }
    set_has_itemlist();
    _impl_.payload_.itemlist_ = itemlist;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.itemlist)
}
void Message::set_allocated_location(::packet::Location* location) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (location) {
    ::google::protobuf::Arena* submessage_arena = location->GetArena();
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(message_arena, location, submessage_arena);
    }
    set_has_location();
    _impl_.payload_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.location)
}
void Message::set_allocated_file(::packet::File* file) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (file) {
    ::google::protobuf::Arena* submessage_arena = file->GetArena();
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.payload_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.file)
}
void Message::set_allocated_filetransferstatus(::packet::FileTransferStatus* filetransferstatus) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (filetransferstatus) {
    ::google::protobuf::Arena* submessage_arena = filetransferstatus->GetArena();
    if (message_arena != submessage_arena) {
      filetransferstatus = ::google::protobuf::internal::GetOwnedMessage(message_arena, filetransferstatus, submessage_arena);
    }
    set_has_filetransferstatus();
    _impl_.payload_.filetransferstatus_ = filetransferstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:packet.Message.fileTransferStatus)
}
Message::Message(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.Message)
}
inline PROTOBUF_NDEBUG_INLINE Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::packet::Message& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Message::Message(
    ::google::protobuf::Arena* arena,
    const Message& from)
    : ::google::protobuf::MessageLite(arena) {
  Message* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kHeartbeat:
        _impl_.payload_.heartbeat_ = ::google::protobuf::MessageLite::CopyConstruct<::packet::Heartbeat>(arena, *from._impl_.payload_.heartbeat_);
        break;
      case kItemlist:
        _impl_.payload_.itemlist_ = ::google::protobuf::MessageLite::CopyConstruct<::packet::Itemlist>(arena, *from._impl_.payload_.itemlist_);
        break;
      case kLocation:
        _impl_.payload_.location_ = ::google::protobuf::MessageLite::CopyConstruct<::packet::Location>(arena, *from._impl_.payload_.location_);
        break;
      case kFile:
        _impl_.payload_.file_ = ::google::protobuf::MessageLite::CopyConstruct<::packet::File>(arena, *from._impl_.payload_.file_);
        break;
      case kFileTransferStatus:
        _impl_.payload_.filetransferstatus_ = ::google::protobuf::MessageLite::CopyConstruct<::packet::FileTransferStatus>(arena, *from._impl_.payload_.filetransferstatus_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:packet.Message)
}
inline PROTOBUF_NDEBUG_INLINE Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
Message::~Message() {
  // @@protoc_insertion_point(destructor:packet.Message)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:packet.Message)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.heartbeat_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        if (_impl_.payload_.heartbeat_ != nullptr) {
          _impl_.payload_.heartbeat_->Clear();
        }
      }
      break;
    }
    case kItemlist: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.itemlist_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        if (_impl_.payload_.itemlist_ != nullptr) {
          _impl_.payload_.itemlist_->Clear();
        }
      }
      break;
    }
    case kLocation: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.location_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        if (_impl_.payload_.location_ != nullptr) {
          _impl_.payload_.location_->Clear();
        }
      }
      break;
    }
    case kFile: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.file_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        if (_impl_.payload_.file_ != nullptr) {
          _impl_.payload_.file_->Clear();
        }
      }
      break;
    }
    case kFileTransferStatus: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.filetransferstatus_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        if (_impl_.payload_.filetransferstatus_ != nullptr) {
          _impl_.payload_.filetransferstatus_->Clear();
        }
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
Message::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<15> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Message, _impl_._cached_size_),
              true,
          },
          "packet.Message",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 5, 0, 2> Message::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Message_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::packet::Message>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .packet.MessageType type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Message, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .packet.MessageType type = 1;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .packet.Heartbeat heartbeat = 2;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.payload_.heartbeat_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .packet.Itemlist itemlist = 3;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.payload_.itemlist_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .packet.Location location = 4;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.payload_.location_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .packet.File file = 5;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.payload_.file_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .packet.FileTransferStatus fileTransferStatus = 6;
    {PROTOBUF_FIELD_OFFSET(Message, _impl_.payload_.filetransferstatus_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::packet::Heartbeat>()},
    {::_pbi::TcParser::GetTable<::packet::Itemlist>()},
    {::_pbi::TcParser::GetTable<::packet::Location>()},
    {::_pbi::TcParser::GetTable<::packet::File>()},
    {::_pbi::TcParser::GetTable<::packet::FileTransferStatus>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.Message)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_payload();
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.Message)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .packet.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  switch (payload_case()) {
    case kHeartbeat: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.payload_.heartbeat_, _impl_.payload_.heartbeat_->GetCachedSize(), target, stream);
      break;
    }
    case kItemlist: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.payload_.itemlist_, _impl_.payload_.itemlist_->GetCachedSize(), target, stream);
      break;
    }
    case kLocation: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *_impl_.payload_.location_, _impl_.payload_.location_->GetCachedSize(), target, stream);
      break;
    }
    case kFile: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *_impl_.payload_.file_, _impl_.payload_.file_->GetCachedSize(), target, stream);
      break;
    }
    case kFileTransferStatus: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *_impl_.payload_.filetransferstatus_, _impl_.payload_.filetransferstatus_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .packet.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (payload_case()) {
    // .packet.Heartbeat heartbeat = 2;
    case kHeartbeat: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.heartbeat_);
      break;
    }
    // .packet.Itemlist itemlist = 3;
    case kItemlist: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.itemlist_);
      break;
    }
    // .packet.Location location = 4;
    case kLocation: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.location_);
      break;
    }
    // .packet.File file = 5;
    case kFile: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.file_);
      break;
    }
    // .packet.FileTransferStatus fileTransferStatus = 6;
    case kFileTransferStatus: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.filetransferstatus_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Message*>(
      &from));
}

void Message::MergeFrom(const Message& from) {
  Message* const _this = this;
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:packet.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kHeartbeat: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.heartbeat_ =
              ::google::protobuf::MessageLite::CopyConstruct<::packet::Heartbeat>(arena, *from._impl_.payload_.heartbeat_);
        } else {
          _this->_impl_.payload_.heartbeat_->MergeFrom(from._internal_heartbeat());
        }
        break;
      }
      case kItemlist: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.itemlist_ =
              ::google::protobuf::MessageLite::CopyConstruct<::packet::Itemlist>(arena, *from._impl_.payload_.itemlist_);
        } else {
          _this->_impl_.payload_.itemlist_->MergeFrom(from._internal_itemlist());
        }
        break;
      }
      case kLocation: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.location_ =
              ::google::protobuf::MessageLite::CopyConstruct<::packet::Location>(arena, *from._impl_.payload_.location_);
        } else {
          _this->_impl_.payload_.location_->MergeFrom(from._internal_location());
        }
        break;
      }
      case kFile: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.file_ =
              ::google::protobuf::MessageLite::CopyConstruct<::packet::File>(arena, *from._impl_.payload_.file_);
        } else {
          _this->_impl_.payload_.file_->MergeFrom(from._internal_file());
        }
        break;
      }
      case kFileTransferStatus: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.filetransferstatus_ =
              ::google::protobuf::MessageLite::CopyConstruct<::packet::FileTransferStatus>(arena, *from._impl_.payload_.filetransferstatus_);
        } else {
          _this->_impl_.payload_.filetransferstatus_->MergeFrom(from._internal_filetransferstatus());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace packet
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
