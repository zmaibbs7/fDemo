// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_header_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_header_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_header_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_header_2eproto {
  static const uint32_t offsets[];
};
namespace packet {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileTransferStatus;
struct FileTransferStatusDefaultTypeInternal;
extern FileTransferStatusDefaultTypeInternal _FileTransferStatus_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Itemlist;
struct ItemlistDefaultTypeInternal;
extern ItemlistDefaultTypeInternal _Itemlist_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> ::packet::File* Arena::CreateMaybeMessage<::packet::File>(Arena*);
template<> ::packet::FileTransferStatus* Arena::CreateMaybeMessage<::packet::FileTransferStatus>(Arena*);
template<> ::packet::Heartbeat* Arena::CreateMaybeMessage<::packet::Heartbeat>(Arena*);
template<> ::packet::Itemlist* Arena::CreateMaybeMessage<::packet::Itemlist>(Arena*);
template<> ::packet::Location* Arena::CreateMaybeMessage<::packet::Location>(Arena*);
template<> ::packet::Message* Arena::CreateMaybeMessage<::packet::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace packet {

enum MessageType : int {
  UNKNOWN = 0,
  HEARTBEAT = 1,
  MAPLIST = 2,
  LOCATION = 3,
  FILE = 4,
  FILE_TRANSFER_STATUS = 5,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UNKNOWN;
constexpr MessageType MessageType_MAX = FILE_TRANSFER_STATUS;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const std::string& MessageType_Name(MessageType value);
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return MessageType_Name(static_cast<MessageType>(enum_t_value));
}
bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value);
// ===================================================================

class Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:packet.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  explicit PROTOBUF_CONSTEXPR Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:packet.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class Itemlist final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:packet.Itemlist) */ {
 public:
  inline Itemlist() : Itemlist(nullptr) {}
  ~Itemlist() override;
  explicit PROTOBUF_CONSTEXPR Itemlist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Itemlist(const Itemlist& from);
  Itemlist(Itemlist&& from) noexcept
    : Itemlist() {
    *this = ::std::move(from);
  }

  inline Itemlist& operator=(const Itemlist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Itemlist& operator=(Itemlist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Itemlist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Itemlist* internal_default_instance() {
    return reinterpret_cast<const Itemlist*>(
               &_Itemlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Itemlist& a, Itemlist& b) {
    a.Swap(&b);
  }
  inline void Swap(Itemlist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Itemlist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Itemlist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Itemlist>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Itemlist& from);
  void MergeFrom(const Itemlist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Itemlist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.Itemlist";
  }
  protected:
  explicit Itemlist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:packet.Itemlist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:packet.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double yaw = 3;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:packet.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:packet.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kFileContentFieldNumber = 3,
    kWholeFileMd5FieldNumber = 6,
    kFilePacketNumFieldNumber = 4,
    kFilePacketTotalFieldNumber = 5,
  };
  // string map_name = 1;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bytes file_content = 3;
  void clear_file_content();
  const std::string& file_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_content();
  PROTOBUF_NODISCARD std::string* release_file_content();
  void set_allocated_file_content(std::string* file_content);
  private:
  const std::string& _internal_file_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_content(const std::string& value);
  std::string* _internal_mutable_file_content();
  public:

  // string whole_file_md5 = 6;
  void clear_whole_file_md5();
  const std::string& whole_file_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_whole_file_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_whole_file_md5();
  PROTOBUF_NODISCARD std::string* release_whole_file_md5();
  void set_allocated_whole_file_md5(std::string* whole_file_md5);
  private:
  const std::string& _internal_whole_file_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whole_file_md5(const std::string& value);
  std::string* _internal_mutable_whole_file_md5();
  public:

  // int32 file_packet_num = 4;
  void clear_file_packet_num();
  int32_t file_packet_num() const;
  void set_file_packet_num(int32_t value);
  private:
  int32_t _internal_file_packet_num() const;
  void _internal_set_file_packet_num(int32_t value);
  public:

  // int32 file_packet_total = 5;
  void clear_file_packet_total();
  int32_t file_packet_total() const;
  void set_file_packet_total(int32_t value);
  private:
  int32_t _internal_file_packet_total() const;
  void _internal_set_file_packet_total(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whole_file_md5_;
    int32_t file_packet_num_;
    int32_t file_packet_total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class FileTransferStatus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:packet.FileTransferStatus) */ {
 public:
  inline FileTransferStatus() : FileTransferStatus(nullptr) {}
  ~FileTransferStatus() override;
  explicit PROTOBUF_CONSTEXPR FileTransferStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileTransferStatus(const FileTransferStatus& from);
  FileTransferStatus(FileTransferStatus&& from) noexcept
    : FileTransferStatus() {
    *this = ::std::move(from);
  }

  inline FileTransferStatus& operator=(const FileTransferStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTransferStatus& operator=(FileTransferStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FileTransferStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileTransferStatus* internal_default_instance() {
    return reinterpret_cast<const FileTransferStatus*>(
               &_FileTransferStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileTransferStatus& a, FileTransferStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTransferStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTransferStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileTransferStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileTransferStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileTransferStatus& from);
  void MergeFrom(const FileTransferStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileTransferStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.FileTransferStatus";
  }
  protected:
  explicit FileTransferStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFileNameFieldNumber = 3,
    kCurrentPacketIndexFieldNumber = 1,
    kTotalPacketsFieldNumber = 2,
  };
  // string current_file_name = 3;
  void clear_current_file_name();
  const std::string& current_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_file_name();
  PROTOBUF_NODISCARD std::string* release_current_file_name();
  void set_allocated_current_file_name(std::string* current_file_name);
  private:
  const std::string& _internal_current_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_file_name(const std::string& value);
  std::string* _internal_mutable_current_file_name();
  public:

  // int32 current_packet_index = 1;
  void clear_current_packet_index();
  int32_t current_packet_index() const;
  void set_current_packet_index(int32_t value);
  private:
  int32_t _internal_current_packet_index() const;
  void _internal_set_current_packet_index(int32_t value);
  public:

  // int32 total_packets = 2;
  void clear_total_packets();
  int32_t total_packets() const;
  void set_total_packets(int32_t value);
  private:
  int32_t _internal_total_packets() const;
  void _internal_set_total_packets(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:packet.FileTransferStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_file_name_;
    int32_t current_packet_index_;
    int32_t total_packets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:packet.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kHeartbeat = 2,
    kItemlist = 3,
    kLocation = 4,
    kFile = 5,
    kFileTransferStatus = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kHeartbeatFieldNumber = 2,
    kItemlistFieldNumber = 3,
    kLocationFieldNumber = 4,
    kFileFieldNumber = 5,
    kFileTransferStatusFieldNumber = 6,
  };
  // .packet.MessageType type = 1;
  void clear_type();
  ::packet::MessageType type() const;
  void set_type(::packet::MessageType value);
  private:
  ::packet::MessageType _internal_type() const;
  void _internal_set_type(::packet::MessageType value);
  public:

  // .packet.Heartbeat heartbeat = 2;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::packet::Heartbeat& heartbeat() const;
  PROTOBUF_NODISCARD ::packet::Heartbeat* release_heartbeat();
  ::packet::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::packet::Heartbeat* heartbeat);
  private:
  const ::packet::Heartbeat& _internal_heartbeat() const;
  ::packet::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::packet::Heartbeat* heartbeat);
  ::packet::Heartbeat* unsafe_arena_release_heartbeat();

  // .packet.Itemlist itemlist = 3;
  bool has_itemlist() const;
  private:
  bool _internal_has_itemlist() const;
  public:
  void clear_itemlist();
  const ::packet::Itemlist& itemlist() const;
  PROTOBUF_NODISCARD ::packet::Itemlist* release_itemlist();
  ::packet::Itemlist* mutable_itemlist();
  void set_allocated_itemlist(::packet::Itemlist* itemlist);
  private:
  const ::packet::Itemlist& _internal_itemlist() const;
  ::packet::Itemlist* _internal_mutable_itemlist();
  public:
  void unsafe_arena_set_allocated_itemlist(
      ::packet::Itemlist* itemlist);
  ::packet::Itemlist* unsafe_arena_release_itemlist();

  // .packet.Location location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::packet::Location& location() const;
  PROTOBUF_NODISCARD ::packet::Location* release_location();
  ::packet::Location* mutable_location();
  void set_allocated_location(::packet::Location* location);
  private:
  const ::packet::Location& _internal_location() const;
  ::packet::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::packet::Location* location);
  ::packet::Location* unsafe_arena_release_location();

  // .packet.File file = 5;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::packet::File& file() const;
  PROTOBUF_NODISCARD ::packet::File* release_file();
  ::packet::File* mutable_file();
  void set_allocated_file(::packet::File* file);
  private:
  const ::packet::File& _internal_file() const;
  ::packet::File* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::packet::File* file);
  ::packet::File* unsafe_arena_release_file();

  // .packet.FileTransferStatus fileTransferStatus = 6;
  bool has_filetransferstatus() const;
  private:
  bool _internal_has_filetransferstatus() const;
  public:
  void clear_filetransferstatus();
  const ::packet::FileTransferStatus& filetransferstatus() const;
  PROTOBUF_NODISCARD ::packet::FileTransferStatus* release_filetransferstatus();
  ::packet::FileTransferStatus* mutable_filetransferstatus();
  void set_allocated_filetransferstatus(::packet::FileTransferStatus* filetransferstatus);
  private:
  const ::packet::FileTransferStatus& _internal_filetransferstatus() const;
  ::packet::FileTransferStatus* _internal_mutable_filetransferstatus();
  public:
  void unsafe_arena_set_allocated_filetransferstatus(
      ::packet::FileTransferStatus* filetransferstatus);
  ::packet::FileTransferStatus* unsafe_arena_release_filetransferstatus();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:packet.Message)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_itemlist();
  void set_has_location();
  void set_has_file();
  void set_has_filetransferstatus();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::packet::Heartbeat* heartbeat_;
      ::packet::Itemlist* itemlist_;
      ::packet::Location* location_;
      ::packet::File* file_;
      ::packet::FileTransferStatus* filetransferstatus_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// string node_id = 1;
inline void Heartbeat::clear_node_id() {
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& Heartbeat::node_id() const {
  // @@protoc_insertion_point(field_get:packet.Heartbeat.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Heartbeat::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.Heartbeat.node_id)
}
inline std::string* Heartbeat::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:packet.Heartbeat.node_id)
  return _s;
}
inline const std::string& Heartbeat::_internal_node_id() const {
  return _impl_.node_id_.Get();
}
inline void Heartbeat::_internal_set_node_id(const std::string& value) {
  
  _impl_.node_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Heartbeat::_internal_mutable_node_id() {
  
  return _impl_.node_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Heartbeat::release_node_id() {
  // @@protoc_insertion_point(field_release:packet.Heartbeat.node_id)
  return _impl_.node_id_.Release();
}
inline void Heartbeat::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  _impl_.node_id_.SetAllocated(node_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.Heartbeat.node_id)
}

// -------------------------------------------------------------------

// Itemlist

// repeated string items = 1;
inline int Itemlist::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int Itemlist::items_size() const {
  return _internal_items_size();
}
inline void Itemlist::clear_items() {
  _impl_.items_.Clear();
}
inline std::string* Itemlist::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:packet.Itemlist.items)
  return _s;
}
inline const std::string& Itemlist::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const std::string& Itemlist::items(int index) const {
  // @@protoc_insertion_point(field_get:packet.Itemlist.items)
  return _internal_items(index);
}
inline std::string* Itemlist::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Itemlist.items)
  return _impl_.items_.Mutable(index);
}
inline void Itemlist::set_items(int index, const std::string& value) {
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:packet.Itemlist.items)
}
inline void Itemlist::set_items(int index, std::string&& value) {
  _impl_.items_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:packet.Itemlist.items)
}
inline void Itemlist::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:packet.Itemlist.items)
}
inline void Itemlist::set_items(int index, const char* value, size_t size) {
  _impl_.items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:packet.Itemlist.items)
}
inline std::string* Itemlist::_internal_add_items() {
  return _impl_.items_.Add();
}
inline void Itemlist::add_items(const std::string& value) {
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:packet.Itemlist.items)
}
inline void Itemlist::add_items(std::string&& value) {
  _impl_.items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:packet.Itemlist.items)
}
inline void Itemlist::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:packet.Itemlist.items)
}
inline void Itemlist::add_items(const char* value, size_t size) {
  _impl_.items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:packet.Itemlist.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Itemlist::items() const {
  // @@protoc_insertion_point(field_list:packet.Itemlist.items)
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Itemlist::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:packet.Itemlist.items)
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// Location

// double x = 1;
inline void Location::clear_x() {
  _impl_.x_ = 0;
}
inline double Location::_internal_x() const {
  return _impl_.x_;
}
inline double Location::x() const {
  // @@protoc_insertion_point(field_get:packet.Location.x)
  return _internal_x();
}
inline void Location::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Location::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:packet.Location.x)
}

// double y = 2;
inline void Location::clear_y() {
  _impl_.y_ = 0;
}
inline double Location::_internal_y() const {
  return _impl_.y_;
}
inline double Location::y() const {
  // @@protoc_insertion_point(field_get:packet.Location.y)
  return _internal_y();
}
inline void Location::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Location::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:packet.Location.y)
}

// double yaw = 3;
inline void Location::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline double Location::_internal_yaw() const {
  return _impl_.yaw_;
}
inline double Location::yaw() const {
  // @@protoc_insertion_point(field_get:packet.Location.yaw)
  return _internal_yaw();
}
inline void Location::_internal_set_yaw(double value) {
  
  _impl_.yaw_ = value;
}
inline void Location::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:packet.Location.yaw)
}

// -------------------------------------------------------------------

// File

// string map_name = 1;
inline void File::clear_map_name() {
  _impl_.map_name_.ClearToEmpty();
}
inline const std::string& File::map_name() const {
  // @@protoc_insertion_point(field_get:packet.File.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.File.map_name)
}
inline std::string* File::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:packet.File.map_name)
  return _s;
}
inline const std::string& File::_internal_map_name() const {
  return _impl_.map_name_.Get();
}
inline void File::_internal_set_map_name(const std::string& value) {
  
  _impl_.map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_map_name() {
  
  return _impl_.map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_map_name() {
  // @@protoc_insertion_point(field_release:packet.File.map_name)
  return _impl_.map_name_.Release();
}
inline void File::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  _impl_.map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.File.map_name)
}

// string file_name = 2;
inline void File::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& File::file_name() const {
  // @@protoc_insertion_point(field_get:packet.File.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.File.file_name)
}
inline std::string* File::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:packet.File.file_name)
  return _s;
}
inline const std::string& File::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void File::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_file_name() {
  // @@protoc_insertion_point(field_release:packet.File.file_name)
  return _impl_.file_name_.Release();
}
inline void File::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.File.file_name)
}

// bytes file_content = 3;
inline void File::clear_file_content() {
  _impl_.file_content_.ClearToEmpty();
}
inline const std::string& File::file_content() const {
  // @@protoc_insertion_point(field_get:packet.File.file_content)
  return _internal_file_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_file_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.File.file_content)
}
inline std::string* File::mutable_file_content() {
  std::string* _s = _internal_mutable_file_content();
  // @@protoc_insertion_point(field_mutable:packet.File.file_content)
  return _s;
}
inline const std::string& File::_internal_file_content() const {
  return _impl_.file_content_.Get();
}
inline void File::_internal_set_file_content(const std::string& value) {
  
  _impl_.file_content_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_file_content() {
  
  return _impl_.file_content_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_file_content() {
  // @@protoc_insertion_point(field_release:packet.File.file_content)
  return _impl_.file_content_.Release();
}
inline void File::set_allocated_file_content(std::string* file_content) {
  if (file_content != nullptr) {
    
  } else {
    
  }
  _impl_.file_content_.SetAllocated(file_content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_content_.IsDefault()) {
    _impl_.file_content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.File.file_content)
}

// int32 file_packet_num = 4;
inline void File::clear_file_packet_num() {
  _impl_.file_packet_num_ = 0;
}
inline int32_t File::_internal_file_packet_num() const {
  return _impl_.file_packet_num_;
}
inline int32_t File::file_packet_num() const {
  // @@protoc_insertion_point(field_get:packet.File.file_packet_num)
  return _internal_file_packet_num();
}
inline void File::_internal_set_file_packet_num(int32_t value) {
  
  _impl_.file_packet_num_ = value;
}
inline void File::set_file_packet_num(int32_t value) {
  _internal_set_file_packet_num(value);
  // @@protoc_insertion_point(field_set:packet.File.file_packet_num)
}

// int32 file_packet_total = 5;
inline void File::clear_file_packet_total() {
  _impl_.file_packet_total_ = 0;
}
inline int32_t File::_internal_file_packet_total() const {
  return _impl_.file_packet_total_;
}
inline int32_t File::file_packet_total() const {
  // @@protoc_insertion_point(field_get:packet.File.file_packet_total)
  return _internal_file_packet_total();
}
inline void File::_internal_set_file_packet_total(int32_t value) {
  
  _impl_.file_packet_total_ = value;
}
inline void File::set_file_packet_total(int32_t value) {
  _internal_set_file_packet_total(value);
  // @@protoc_insertion_point(field_set:packet.File.file_packet_total)
}

// string whole_file_md5 = 6;
inline void File::clear_whole_file_md5() {
  _impl_.whole_file_md5_.ClearToEmpty();
}
inline const std::string& File::whole_file_md5() const {
  // @@protoc_insertion_point(field_get:packet.File.whole_file_md5)
  return _internal_whole_file_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_whole_file_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.whole_file_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.File.whole_file_md5)
}
inline std::string* File::mutable_whole_file_md5() {
  std::string* _s = _internal_mutable_whole_file_md5();
  // @@protoc_insertion_point(field_mutable:packet.File.whole_file_md5)
  return _s;
}
inline const std::string& File::_internal_whole_file_md5() const {
  return _impl_.whole_file_md5_.Get();
}
inline void File::_internal_set_whole_file_md5(const std::string& value) {
  
  _impl_.whole_file_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_whole_file_md5() {
  
  return _impl_.whole_file_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_whole_file_md5() {
  // @@protoc_insertion_point(field_release:packet.File.whole_file_md5)
  return _impl_.whole_file_md5_.Release();
}
inline void File::set_allocated_whole_file_md5(std::string* whole_file_md5) {
  if (whole_file_md5 != nullptr) {
    
  } else {
    
  }
  _impl_.whole_file_md5_.SetAllocated(whole_file_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.whole_file_md5_.IsDefault()) {
    _impl_.whole_file_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.File.whole_file_md5)
}

// -------------------------------------------------------------------

// FileTransferStatus

// int32 current_packet_index = 1;
inline void FileTransferStatus::clear_current_packet_index() {
  _impl_.current_packet_index_ = 0;
}
inline int32_t FileTransferStatus::_internal_current_packet_index() const {
  return _impl_.current_packet_index_;
}
inline int32_t FileTransferStatus::current_packet_index() const {
  // @@protoc_insertion_point(field_get:packet.FileTransferStatus.current_packet_index)
  return _internal_current_packet_index();
}
inline void FileTransferStatus::_internal_set_current_packet_index(int32_t value) {
  
  _impl_.current_packet_index_ = value;
}
inline void FileTransferStatus::set_current_packet_index(int32_t value) {
  _internal_set_current_packet_index(value);
  // @@protoc_insertion_point(field_set:packet.FileTransferStatus.current_packet_index)
}

// int32 total_packets = 2;
inline void FileTransferStatus::clear_total_packets() {
  _impl_.total_packets_ = 0;
}
inline int32_t FileTransferStatus::_internal_total_packets() const {
  return _impl_.total_packets_;
}
inline int32_t FileTransferStatus::total_packets() const {
  // @@protoc_insertion_point(field_get:packet.FileTransferStatus.total_packets)
  return _internal_total_packets();
}
inline void FileTransferStatus::_internal_set_total_packets(int32_t value) {
  
  _impl_.total_packets_ = value;
}
inline void FileTransferStatus::set_total_packets(int32_t value) {
  _internal_set_total_packets(value);
  // @@protoc_insertion_point(field_set:packet.FileTransferStatus.total_packets)
}

// string current_file_name = 3;
inline void FileTransferStatus::clear_current_file_name() {
  _impl_.current_file_name_.ClearToEmpty();
}
inline const std::string& FileTransferStatus::current_file_name() const {
  // @@protoc_insertion_point(field_get:packet.FileTransferStatus.current_file_name)
  return _internal_current_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileTransferStatus::set_current_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.current_file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:packet.FileTransferStatus.current_file_name)
}
inline std::string* FileTransferStatus::mutable_current_file_name() {
  std::string* _s = _internal_mutable_current_file_name();
  // @@protoc_insertion_point(field_mutable:packet.FileTransferStatus.current_file_name)
  return _s;
}
inline const std::string& FileTransferStatus::_internal_current_file_name() const {
  return _impl_.current_file_name_.Get();
}
inline void FileTransferStatus::_internal_set_current_file_name(const std::string& value) {
  
  _impl_.current_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileTransferStatus::_internal_mutable_current_file_name() {
  
  return _impl_.current_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileTransferStatus::release_current_file_name() {
  // @@protoc_insertion_point(field_release:packet.FileTransferStatus.current_file_name)
  return _impl_.current_file_name_.Release();
}
inline void FileTransferStatus::set_allocated_current_file_name(std::string* current_file_name) {
  if (current_file_name != nullptr) {
    
  } else {
    
  }
  _impl_.current_file_name_.SetAllocated(current_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_file_name_.IsDefault()) {
    _impl_.current_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.FileTransferStatus.current_file_name)
}

// -------------------------------------------------------------------

// Message

// .packet.MessageType type = 1;
inline void Message::clear_type() {
  _impl_.type_ = 0;
}
inline ::packet::MessageType Message::_internal_type() const {
  return static_cast< ::packet::MessageType >(_impl_.type_);
}
inline ::packet::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:packet.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::packet::MessageType value) {
  
  _impl_.type_ = value;
}
inline void Message::set_type(::packet::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:packet.Message.type)
}

// .packet.Heartbeat heartbeat = 2;
inline bool Message::_internal_has_heartbeat() const {
  return payload_case() == kHeartbeat;
}
inline bool Message::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void Message::set_has_heartbeat() {
  _impl_._oneof_case_[0] = kHeartbeat;
}
inline void Message::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.heartbeat_;
    }
    clear_has_payload();
  }
}
inline ::packet::Heartbeat* Message::release_heartbeat() {
  // @@protoc_insertion_point(field_release:packet.Message.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_payload();
    ::packet::Heartbeat* temp = _impl_.payload_.heartbeat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::Heartbeat& Message::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *_impl_.payload_.heartbeat_
      : reinterpret_cast< ::packet::Heartbeat&>(::packet::_Heartbeat_default_instance_);
}
inline const ::packet::Heartbeat& Message::heartbeat() const {
  // @@protoc_insertion_point(field_get:packet.Message.heartbeat)
  return _internal_heartbeat();
}
inline ::packet::Heartbeat* Message::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Message.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_payload();
    ::packet::Heartbeat* temp = _impl_.payload_.heartbeat_;
    _impl_.payload_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_heartbeat(::packet::Heartbeat* heartbeat) {
  clear_payload();
  if (heartbeat) {
    set_has_heartbeat();
    _impl_.payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Message.heartbeat)
}
inline ::packet::Heartbeat* Message::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_payload();
    set_has_heartbeat();
    _impl_.payload_.heartbeat_ = CreateMaybeMessage< ::packet::Heartbeat >(GetArenaForAllocation());
  }
  return _impl_.payload_.heartbeat_;
}
inline ::packet::Heartbeat* Message::mutable_heartbeat() {
  ::packet::Heartbeat* _msg = _internal_mutable_heartbeat();
  // @@protoc_insertion_point(field_mutable:packet.Message.heartbeat)
  return _msg;
}

// .packet.Itemlist itemlist = 3;
inline bool Message::_internal_has_itemlist() const {
  return payload_case() == kItemlist;
}
inline bool Message::has_itemlist() const {
  return _internal_has_itemlist();
}
inline void Message::set_has_itemlist() {
  _impl_._oneof_case_[0] = kItemlist;
}
inline void Message::clear_itemlist() {
  if (_internal_has_itemlist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.itemlist_;
    }
    clear_has_payload();
  }
}
inline ::packet::Itemlist* Message::release_itemlist() {
  // @@protoc_insertion_point(field_release:packet.Message.itemlist)
  if (_internal_has_itemlist()) {
    clear_has_payload();
    ::packet::Itemlist* temp = _impl_.payload_.itemlist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.itemlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::Itemlist& Message::_internal_itemlist() const {
  return _internal_has_itemlist()
      ? *_impl_.payload_.itemlist_
      : reinterpret_cast< ::packet::Itemlist&>(::packet::_Itemlist_default_instance_);
}
inline const ::packet::Itemlist& Message::itemlist() const {
  // @@protoc_insertion_point(field_get:packet.Message.itemlist)
  return _internal_itemlist();
}
inline ::packet::Itemlist* Message::unsafe_arena_release_itemlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Message.itemlist)
  if (_internal_has_itemlist()) {
    clear_has_payload();
    ::packet::Itemlist* temp = _impl_.payload_.itemlist_;
    _impl_.payload_.itemlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_itemlist(::packet::Itemlist* itemlist) {
  clear_payload();
  if (itemlist) {
    set_has_itemlist();
    _impl_.payload_.itemlist_ = itemlist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Message.itemlist)
}
inline ::packet::Itemlist* Message::_internal_mutable_itemlist() {
  if (!_internal_has_itemlist()) {
    clear_payload();
    set_has_itemlist();
    _impl_.payload_.itemlist_ = CreateMaybeMessage< ::packet::Itemlist >(GetArenaForAllocation());
  }
  return _impl_.payload_.itemlist_;
}
inline ::packet::Itemlist* Message::mutable_itemlist() {
  ::packet::Itemlist* _msg = _internal_mutable_itemlist();
  // @@protoc_insertion_point(field_mutable:packet.Message.itemlist)
  return _msg;
}

// .packet.Location location = 4;
inline bool Message::_internal_has_location() const {
  return payload_case() == kLocation;
}
inline bool Message::has_location() const {
  return _internal_has_location();
}
inline void Message::set_has_location() {
  _impl_._oneof_case_[0] = kLocation;
}
inline void Message::clear_location() {
  if (_internal_has_location()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.location_;
    }
    clear_has_payload();
  }
}
inline ::packet::Location* Message::release_location() {
  // @@protoc_insertion_point(field_release:packet.Message.location)
  if (_internal_has_location()) {
    clear_has_payload();
    ::packet::Location* temp = _impl_.payload_.location_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::Location& Message::_internal_location() const {
  return _internal_has_location()
      ? *_impl_.payload_.location_
      : reinterpret_cast< ::packet::Location&>(::packet::_Location_default_instance_);
}
inline const ::packet::Location& Message::location() const {
  // @@protoc_insertion_point(field_get:packet.Message.location)
  return _internal_location();
}
inline ::packet::Location* Message::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Message.location)
  if (_internal_has_location()) {
    clear_has_payload();
    ::packet::Location* temp = _impl_.payload_.location_;
    _impl_.payload_.location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_location(::packet::Location* location) {
  clear_payload();
  if (location) {
    set_has_location();
    _impl_.payload_.location_ = location;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Message.location)
}
inline ::packet::Location* Message::_internal_mutable_location() {
  if (!_internal_has_location()) {
    clear_payload();
    set_has_location();
    _impl_.payload_.location_ = CreateMaybeMessage< ::packet::Location >(GetArenaForAllocation());
  }
  return _impl_.payload_.location_;
}
inline ::packet::Location* Message::mutable_location() {
  ::packet::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:packet.Message.location)
  return _msg;
}

// .packet.File file = 5;
inline bool Message::_internal_has_file() const {
  return payload_case() == kFile;
}
inline bool Message::has_file() const {
  return _internal_has_file();
}
inline void Message::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline void Message::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.file_;
    }
    clear_has_payload();
  }
}
inline ::packet::File* Message::release_file() {
  // @@protoc_insertion_point(field_release:packet.Message.file)
  if (_internal_has_file()) {
    clear_has_payload();
    ::packet::File* temp = _impl_.payload_.file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::File& Message::_internal_file() const {
  return _internal_has_file()
      ? *_impl_.payload_.file_
      : reinterpret_cast< ::packet::File&>(::packet::_File_default_instance_);
}
inline const ::packet::File& Message::file() const {
  // @@protoc_insertion_point(field_get:packet.Message.file)
  return _internal_file();
}
inline ::packet::File* Message::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Message.file)
  if (_internal_has_file()) {
    clear_has_payload();
    ::packet::File* temp = _impl_.payload_.file_;
    _impl_.payload_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_file(::packet::File* file) {
  clear_payload();
  if (file) {
    set_has_file();
    _impl_.payload_.file_ = file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Message.file)
}
inline ::packet::File* Message::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_payload();
    set_has_file();
    _impl_.payload_.file_ = CreateMaybeMessage< ::packet::File >(GetArenaForAllocation());
  }
  return _impl_.payload_.file_;
}
inline ::packet::File* Message::mutable_file() {
  ::packet::File* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:packet.Message.file)
  return _msg;
}

// .packet.FileTransferStatus fileTransferStatus = 6;
inline bool Message::_internal_has_filetransferstatus() const {
  return payload_case() == kFileTransferStatus;
}
inline bool Message::has_filetransferstatus() const {
  return _internal_has_filetransferstatus();
}
inline void Message::set_has_filetransferstatus() {
  _impl_._oneof_case_[0] = kFileTransferStatus;
}
inline void Message::clear_filetransferstatus() {
  if (_internal_has_filetransferstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.filetransferstatus_;
    }
    clear_has_payload();
  }
}
inline ::packet::FileTransferStatus* Message::release_filetransferstatus() {
  // @@protoc_insertion_point(field_release:packet.Message.fileTransferStatus)
  if (_internal_has_filetransferstatus()) {
    clear_has_payload();
    ::packet::FileTransferStatus* temp = _impl_.payload_.filetransferstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.filetransferstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packet::FileTransferStatus& Message::_internal_filetransferstatus() const {
  return _internal_has_filetransferstatus()
      ? *_impl_.payload_.filetransferstatus_
      : reinterpret_cast< ::packet::FileTransferStatus&>(::packet::_FileTransferStatus_default_instance_);
}
inline const ::packet::FileTransferStatus& Message::filetransferstatus() const {
  // @@protoc_insertion_point(field_get:packet.Message.fileTransferStatus)
  return _internal_filetransferstatus();
}
inline ::packet::FileTransferStatus* Message::unsafe_arena_release_filetransferstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:packet.Message.fileTransferStatus)
  if (_internal_has_filetransferstatus()) {
    clear_has_payload();
    ::packet::FileTransferStatus* temp = _impl_.payload_.filetransferstatus_;
    _impl_.payload_.filetransferstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_filetransferstatus(::packet::FileTransferStatus* filetransferstatus) {
  clear_payload();
  if (filetransferstatus) {
    set_has_filetransferstatus();
    _impl_.payload_.filetransferstatus_ = filetransferstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.Message.fileTransferStatus)
}
inline ::packet::FileTransferStatus* Message::_internal_mutable_filetransferstatus() {
  if (!_internal_has_filetransferstatus()) {
    clear_payload();
    set_has_filetransferstatus();
    _impl_.payload_.filetransferstatus_ = CreateMaybeMessage< ::packet::FileTransferStatus >(GetArenaForAllocation());
  }
  return _impl_.payload_.filetransferstatus_;
}
inline ::packet::FileTransferStatus* Message::mutable_filetransferstatus() {
  ::packet::FileTransferStatus* _msg = _internal_mutable_filetransferstatus();
  // @@protoc_insertion_point(field_mutable:packet.Message.fileTransferStatus)
  return _msg;
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::packet::MessageType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_header_2eproto
