// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: header.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_header_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_header_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_header_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_header_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_header_2eproto;
namespace packet {
class FilePacketHeader;
struct FilePacketHeaderDefaultTypeInternal;
extern FilePacketHeaderDefaultTypeInternal _FilePacketHeader_default_instance_;
class MessagePacketHeader;
struct MessagePacketHeaderDefaultTypeInternal;
extern MessagePacketHeaderDefaultTypeInternal _MessagePacketHeader_default_instance_;
}  // namespace packet
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace packet {
enum MessageType : int {
  UNKNOWN = 0,
  CONTROL = 1,
  FILE = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(2);
constexpr int MessageType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MessagePacketHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:packet.MessagePacketHeader) */ {
 public:
  inline MessagePacketHeader() : MessagePacketHeader(nullptr) {}
  ~MessagePacketHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessagePacketHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessagePacketHeader(const MessagePacketHeader& from) : MessagePacketHeader(nullptr, from) {}
  inline MessagePacketHeader(MessagePacketHeader&& from) noexcept
      : MessagePacketHeader(nullptr, std::move(from)) {}
  inline MessagePacketHeader& operator=(const MessagePacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagePacketHeader& operator=(MessagePacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessagePacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessagePacketHeader* internal_default_instance() {
    return reinterpret_cast<const MessagePacketHeader*>(
        &_MessagePacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MessagePacketHeader& a, MessagePacketHeader& b) { a.Swap(&b); }
  inline void Swap(MessagePacketHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagePacketHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessagePacketHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MessagePacketHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessagePacketHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessagePacketHeader& from) { MessagePacketHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessagePacketHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "packet.MessagePacketHeader"; }

 protected:
  explicit MessagePacketHeader(::google::protobuf::Arena* arena);
  MessagePacketHeader(::google::protobuf::Arena* arena, const MessagePacketHeader& from);
  MessagePacketHeader(::google::protobuf::Arena* arena, MessagePacketHeader&& from) noexcept
      : MessagePacketHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMagicNumberFieldNumber = 1,
    kPacketTypeFieldNumber = 2,
    kDataLengthFieldNumber = 3,
    kPacketIdFieldNumber = 4,
    kPacketChecksumFieldNumber = 5,
  };
  // int32 magic_number = 1;
  void clear_magic_number() ;
  ::int32_t magic_number() const;
  void set_magic_number(::int32_t value);

  private:
  ::int32_t _internal_magic_number() const;
  void _internal_set_magic_number(::int32_t value);

  public:
  // .packet.MessageType packet_type = 2;
  void clear_packet_type() ;
  ::packet::MessageType packet_type() const;
  void set_packet_type(::packet::MessageType value);

  private:
  ::packet::MessageType _internal_packet_type() const;
  void _internal_set_packet_type(::packet::MessageType value);

  public:
  // int32 data_length = 3;
  void clear_data_length() ;
  ::int32_t data_length() const;
  void set_data_length(::int32_t value);

  private:
  ::int32_t _internal_data_length() const;
  void _internal_set_data_length(::int32_t value);

  public:
  // int32 packet_id = 4;
  void clear_packet_id() ;
  ::int32_t packet_id() const;
  void set_packet_id(::int32_t value);

  private:
  ::int32_t _internal_packet_id() const;
  void _internal_set_packet_id(::int32_t value);

  public:
  // int32 packet_checksum = 5;
  void clear_packet_checksum() ;
  ::int32_t packet_checksum() const;
  void set_packet_checksum(::int32_t value);

  private:
  ::int32_t _internal_packet_checksum() const;
  void _internal_set_packet_checksum(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:packet.MessagePacketHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MessagePacketHeader_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessagePacketHeader& from_msg);
    ::int32_t magic_number_;
    int packet_type_;
    ::int32_t data_length_;
    ::int32_t packet_id_;
    ::int32_t packet_checksum_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};
// -------------------------------------------------------------------

class FilePacketHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:packet.FilePacketHeader) */ {
 public:
  inline FilePacketHeader() : FilePacketHeader(nullptr) {}
  ~FilePacketHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FilePacketHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline FilePacketHeader(const FilePacketHeader& from) : FilePacketHeader(nullptr, from) {}
  inline FilePacketHeader(FilePacketHeader&& from) noexcept
      : FilePacketHeader(nullptr, std::move(from)) {}
  inline FilePacketHeader& operator=(const FilePacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePacketHeader& operator=(FilePacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilePacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilePacketHeader* internal_default_instance() {
    return reinterpret_cast<const FilePacketHeader*>(
        &_FilePacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FilePacketHeader& a, FilePacketHeader& b) { a.Swap(&b); }
  inline void Swap(FilePacketHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePacketHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilePacketHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FilePacketHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilePacketHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FilePacketHeader& from) { FilePacketHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FilePacketHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "packet.FilePacketHeader"; }

 protected:
  explicit FilePacketHeader(::google::protobuf::Arena* arena);
  FilePacketHeader(::google::protobuf::Arena* arena, const FilePacketHeader& from);
  FilePacketHeader(::google::protobuf::Arena* arena, FilePacketHeader&& from) noexcept
      : FilePacketHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileNameFieldNumber = 1,
    kFileMd5FieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // string file_md5 = 2;
  void clear_file_md5() ;
  const std::string& file_md5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_md5(Arg_&& arg, Args_... args);
  std::string* mutable_file_md5();
  PROTOBUF_NODISCARD std::string* release_file_md5();
  void set_allocated_file_md5(std::string* value);

  private:
  const std::string& _internal_file_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_md5(
      const std::string& value);
  std::string* _internal_mutable_file_md5();

  public:
  // @@protoc_insertion_point(class_scope:packet.FilePacketHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FilePacketHeader_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FilePacketHeader& from_msg);
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    ::google::protobuf::internal::ArenaStringPtr file_md5_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_header_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessagePacketHeader

// int32 magic_number = 1;
inline void MessagePacketHeader::clear_magic_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.magic_number_ = 0;
}
inline ::int32_t MessagePacketHeader::magic_number() const {
  // @@protoc_insertion_point(field_get:packet.MessagePacketHeader.magic_number)
  return _internal_magic_number();
}
inline void MessagePacketHeader::set_magic_number(::int32_t value) {
  _internal_set_magic_number(value);
  // @@protoc_insertion_point(field_set:packet.MessagePacketHeader.magic_number)
}
inline ::int32_t MessagePacketHeader::_internal_magic_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.magic_number_;
}
inline void MessagePacketHeader::_internal_set_magic_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.magic_number_ = value;
}

// .packet.MessageType packet_type = 2;
inline void MessagePacketHeader::clear_packet_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_type_ = 0;
}
inline ::packet::MessageType MessagePacketHeader::packet_type() const {
  // @@protoc_insertion_point(field_get:packet.MessagePacketHeader.packet_type)
  return _internal_packet_type();
}
inline void MessagePacketHeader::set_packet_type(::packet::MessageType value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:packet.MessagePacketHeader.packet_type)
}
inline ::packet::MessageType MessagePacketHeader::_internal_packet_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::packet::MessageType>(_impl_.packet_type_);
}
inline void MessagePacketHeader::_internal_set_packet_type(::packet::MessageType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_type_ = value;
}

// int32 data_length = 3;
inline void MessagePacketHeader::clear_data_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_length_ = 0;
}
inline ::int32_t MessagePacketHeader::data_length() const {
  // @@protoc_insertion_point(field_get:packet.MessagePacketHeader.data_length)
  return _internal_data_length();
}
inline void MessagePacketHeader::set_data_length(::int32_t value) {
  _internal_set_data_length(value);
  // @@protoc_insertion_point(field_set:packet.MessagePacketHeader.data_length)
}
inline ::int32_t MessagePacketHeader::_internal_data_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_length_;
}
inline void MessagePacketHeader::_internal_set_data_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_length_ = value;
}

// int32 packet_id = 4;
inline void MessagePacketHeader::clear_packet_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_id_ = 0;
}
inline ::int32_t MessagePacketHeader::packet_id() const {
  // @@protoc_insertion_point(field_get:packet.MessagePacketHeader.packet_id)
  return _internal_packet_id();
}
inline void MessagePacketHeader::set_packet_id(::int32_t value) {
  _internal_set_packet_id(value);
  // @@protoc_insertion_point(field_set:packet.MessagePacketHeader.packet_id)
}
inline ::int32_t MessagePacketHeader::_internal_packet_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_id_;
}
inline void MessagePacketHeader::_internal_set_packet_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_id_ = value;
}

// int32 packet_checksum = 5;
inline void MessagePacketHeader::clear_packet_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_checksum_ = 0;
}
inline ::int32_t MessagePacketHeader::packet_checksum() const {
  // @@protoc_insertion_point(field_get:packet.MessagePacketHeader.packet_checksum)
  return _internal_packet_checksum();
}
inline void MessagePacketHeader::set_packet_checksum(::int32_t value) {
  _internal_set_packet_checksum(value);
  // @@protoc_insertion_point(field_set:packet.MessagePacketHeader.packet_checksum)
}
inline ::int32_t MessagePacketHeader::_internal_packet_checksum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_checksum_;
}
inline void MessagePacketHeader::_internal_set_packet_checksum(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_checksum_ = value;
}

// -------------------------------------------------------------------

// FilePacketHeader

// string file_name = 1;
inline void FilePacketHeader::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FilePacketHeader::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:packet.FilePacketHeader.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilePacketHeader::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:packet.FilePacketHeader.file_name)
}
inline std::string* FilePacketHeader::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:packet.FilePacketHeader.file_name)
  return _s;
}
inline const std::string& FilePacketHeader::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_name_.Get();
}
inline void FilePacketHeader::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* FilePacketHeader::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* FilePacketHeader::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:packet.FilePacketHeader.file_name)
  return _impl_.file_name_.Release();
}
inline void FilePacketHeader::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.FilePacketHeader.file_name)
}

// string file_md5 = 2;
inline void FilePacketHeader::clear_file_md5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_md5_.ClearToEmpty();
}
inline const std::string& FilePacketHeader::file_md5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:packet.FilePacketHeader.file_md5)
  return _internal_file_md5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilePacketHeader::set_file_md5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_md5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:packet.FilePacketHeader.file_md5)
}
inline std::string* FilePacketHeader::mutable_file_md5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_md5();
  // @@protoc_insertion_point(field_mutable:packet.FilePacketHeader.file_md5)
  return _s;
}
inline const std::string& FilePacketHeader::_internal_file_md5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_md5_.Get();
}
inline void FilePacketHeader::_internal_set_file_md5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_md5_.Set(value, GetArena());
}
inline std::string* FilePacketHeader::_internal_mutable_file_md5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_md5_.Mutable( GetArena());
}
inline std::string* FilePacketHeader::release_file_md5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:packet.FilePacketHeader.file_md5)
  return _impl_.file_md5_.Release();
}
inline void FilePacketHeader::set_allocated_file_md5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_md5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_md5_.IsDefault()) {
          _impl_.file_md5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:packet.FilePacketHeader.file_md5)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace packet


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::packet::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::packet::MessageType>() {
  return ::packet::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_header_2eproto_2epb_2eh
